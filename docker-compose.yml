version: '3.9'

networks:
  ldrapp:
    driver: bridge

services:
  nginx:
    image: nginx:stable-alpine
    container_name: nginx
    ports:
      - "8080:80"
    volumes:
      - .:/var/www/html
      - ./docker/nginx/default.conf:/etc/nginx/conf.d/default.conf
    depends_on:
      - php
      - postgres
    networks:
      - ldrapp

  php:
    build:
      context: .
      dockerfile: docker/app.Dockerfile
    container_name: php
    user: "1000:1000"
    volumes:
      - .:/var/www/html
    ports:
      - "8999:9000"
    networks:
      - ldrapp

  postgres:
    image: postgres:15-alpine
    container_name: postgres
    restart: unless-stopped
    ports:
      - '8432:5432'
    volumes:
      - ./docker/postgres/init.sh:/docker-entrypoint-initdb.d/postgres-init.sh
      - ./docker/postgres/data:/var/lib/postgresql/data
    environment:
      POSTGRES_USER: ${DB_USERNAME}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: ${DB_DATABASE}
      POSTGRES_HOST_AUTH_METHOD: trust
      POSTGRES_SCHEMA: public
      APP_ENV: ${APP_ENV}
    networks:
      - ldrapp

  redis:
    image: redis:7.2.1-alpine
    container_name: redis
    networks:
      - ldrapp
    ports:
      - "8379:6379"

  composer:
    image: composer:latest
    container_name: composer
    volumes:
      - .:/var/www/html
    working_dir: /var/www/html
    links:
      - php
    networks:
      - ldrapp

  npm:
    image: node:20.9.0
    container_name: npm
    volumes:
      - .:/var/www/html
    working_dir: /var/www/html
    entrypoint: ['npm']
    networks:
      - ldrapp

  artisan:
    build:
      context: .
      dockerfile: docker/app.Dockerfile
    container_name: artisan
    volumes:
      - .:/var/www/html
    depends_on:
      - postgres
    working_dir: /var/www/html
    entrypoint: ['/var/www/html/artisan']
    networks:
      - ldrapp
